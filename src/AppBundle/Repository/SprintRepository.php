<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * SprintRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SprintRepository extends EntityRepository {

    public function getProjectSprintByNumber($project_id, $sprint_number) {
        return $this->getEntityManager()
                        ->createQuery("select s from AppBundle\Entity\Sprint s where "
                                . "s.project = $project_id and s.number = $sprint_number")
                        ->getOneOrNullResult();
    }

    public function getActualSprintsTasksByProjectId($project_id) {
        $date = date('Y-m-d');

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('Sprint', 'Task', 'ChildTask')
                ->from('AppBundle\Entity\Sprint', 'Sprint')
                ->leftJoin('Sprint.task', 'Task')
                ->leftJoin('Task.children', 'ChildTask')
                ->where('Sprint.dateEnd >= :now_date')
                ->andWhere('Sprint.project= :id')
                ->setParameters(array(
                    'now_date' => $date,
                    'id' => $project_id));
        ;
        $query = $qb->getQuery();
        return $query->getResult();
    }

    public function getExpiredSprintsTasksByProjectId($project_id) {
        $date = date('Y-m-d');

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('Sprint', 'Task', 'ChildTask')
                ->from('AppBundle\Entity\Sprint', 'Sprint')
                ->leftJoin('Sprint.task', 'Task')
                ->leftJoin('Task.children', 'ChildTask')
                ->where('Sprint.dateEnd < :now_date')
                ->andWhere('Task.state != :state')
                ->andWhere('Sprint.project= :id')
                ->setParameters(array(
                    'now_date' => $date,
                    'state' => 'Finished',
                    'id' => $project_id));
        ;
        $query = $qb->getQuery();
        return $query->getResult();
    }
    
    public function getSprintsDoneTasksByProjectId($project_id) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
                ->select('count(Task.id) as count_tasks','Sprint.id as sprint_id')
                ->from('AppBundle\Entity\Sprint', 'Sprint')
                ->leftJoin('Sprint.task', 'Task')
                ->Where('Sprint.project= :id')
                ->andWhere('Task.state = :state')
                ->setParameters(array(
                    'state' => 'Finished',
                    'id' => $project_id))
                ->groupBy('Sprint');
        ;
        $query = $qb->getQuery();
        return $query->getResult();
    }

}
